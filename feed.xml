<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://zzong2006.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://zzong2006.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-09T11:27:25+00:00</updated><id>https://zzong2006.github.io/feed.xml</id><title type="html">Believe I.Y.</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Agent 벤치마크</title><link href="https://zzong2006.github.io/blog/2025/gaia/" rel="alternate" type="text/html" title="Agent 벤치마크"/><published>2025-01-09T20:00:00+00:00</published><updated>2025-01-09T20:00:00+00:00</updated><id>https://zzong2006.github.io/blog/2025/gaia</id><content type="html" xml:base="https://zzong2006.github.io/blog/2025/gaia/"><![CDATA[<h1 id="gaia-leaderboard">GAIA Leaderboard</h1> <h2 id="what-is-the-gaia">What is the GAIA?</h2> <p>GAIA is a benchmark which aims at evaluating next-generation LLMs (LLMs with augmented capabilities due to added tooling, efficient prompting, access to search, etc). (See our paper for more details.)</p> <p>GAIA는 인간에게는 개념적으로 간단하지만, AI에게는 복잡한 작업을 요구하는 방식으로 설계되었다.</p> <p>작업 자체는 간단하지만, <strong>복잡한 순차적 행동(sequence of actions)</strong>과 <strong>조합적 공간(combinatorial space)</strong>을 필요로 합니다. 작업의 결과물은 작업이 완전히 성공적으로 수행되었을 때만 얻어지며, 결과를 검증하는 것은 상대적으로 간단합니다.</p> <p>(1) 현실적이고 도전적인 질문 GAIA는 실세계에서 사용될 가능성이 높은 질문을 기반으로 설계되었습니다. 질문은 AI가 다음과 같은 작업을 필요로 하게 만듭니다: 웹 검색: 변화하는 인터넷 데이터를 탐색. 멀티모달 처리: 텍스트뿐만 아니라 이미지, 영상 등 다양한 데이터를 처리. 다단계 추론: 여러 단계를 거쳐 답을 도출</p> <h2 id="gaia-특징">GAIA 특징</h2> <ol> <li></li> <li>Non-gameability: 다양한 단계를 성공적으로 완료해야 정답을 완료할 수 있으므로, 추측이나 우연으로 정답을 맞추기가 어렵게 설계됨</li> <li>Easy Interpretability: GAIA의 질문은 간단하며, <strong>명확한 이유 추적(reasoning trace)</strong>이 가능하여 비전문가도 쉽게 확인할 수 있는 검증 과정 제공 <ol> <li>반면 MMLU 같은 벤치마크는 잘못된 추론을 해도 정답에 도달할 가능성이 높음</li> </ol> </li> </ol> <p>Even equipped with tools, GPT4 does not exceed a 30% success rate for the easiest of our tasks, and 0% for the hardest. In the meantime, the average success rate for human respondents is 92%.</p> <h2 id="related-works">Related Works</h2> <p>APIBench 또는 AgentBench 같은 다양한 <strong>폐쇄형 환경(closed box environments)</strong>에서 어시스턴트 LLM을 테스트할 수 있는 기존 벤치마크들이 있었다.</p> <p>하지만 (1) 폐쇄된 환경에서 (2) 특정 API나 시스템 사용을 평가하는데 주요 관심이 있다. 즉, 모델이 “특정 API를 얼마나 잘 사용하는가”를 측정하는 데 초점이 맞춰져 있다.</p> <p>이러한 접근은 현실 세계에서의 상호작용 결과를 일반화하기 어렵게 만들고, 일반적인(real-world grounded) 평가가 아닌, 특정 도구 사용 능력을 평가하는 데 그칠 위험이 있다.</p> <h2 id="giga-예시">GIGA 예시</h2> <p>Level 1</p> <ul> <li>Question: 2018년 1월부터 5월까지 NIH 웹사이트에 기재된 H. pylori와 여드름 환자에 대한 임상 시험의 실제 등록 수는 얼마였습니까?</li> <li>정답: 90</li> </ul> <p>Level 2</p> <p>(파인트 아이스크림 성분 구성표가 사진으로 제공됨)</p> <ul> <li>질문: 이 파인트 전체가 아이스크림으로 구성되어 있다면, 2020년 위키피디아에 보고된 미국 연방 기준의 버터 지방 함량에 비해 몇 퍼센트 높거나 낮습니까? + 또는 -로 시작하는 숫자로 소수점 첫째 자리까지 반올림하여 답변하세요.</li> <li>정답: +4.6</li> </ul> <p>Level 3</p> <ul> <li> <p>질문: 2006년 1월 21일, NASA의 천문학 데이에서 찍은 사진에서 두 명의 우주비행사가 보이며, 한 명이 다른 한 명보다 훨씬 작게 보입니다. 2023년 8월 기준으로, 작은 우주비행사가 속했던 NASA 우주비행사 그룹의 우주비행사 중 우주에서 가장 적은 시간을 보낸 사람은 누구이며, 그는 우주에서 몇 분(minutes)을 보냈습니까? 우주에서 시간을 보내지 않은 우주비행사는 제외하세요. 우주비행사의 성을 쓰고, 숫자와 세미콜론으로 구분하세요. 숫자에는 천 단위 구분 기호로 쉼표를 사용하세요.</p> </li> <li> <p>정답: White; 5,876</p> </li> </ul>]]></content><author><name></name></author><category term="benchmark"/><category term="LLM"/><category term="agent"/><category term="WIP"/><summary type="html"><![CDATA[GAIA Leaderboard]]></summary></entry><entry><title type="html">LLM 을 이용한 Dense Retrieval</title><link href="https://zzong2006.github.io/blog/2025/use-llm-for-dense-retrieval/" rel="alternate" type="text/html" title="LLM 을 이용한 Dense Retrieval"/><published>2025-01-08T16:00:00+00:00</published><updated>2025-01-08T16:00:00+00:00</updated><id>https://zzong2006.github.io/blog/2025/use-llm-for-dense-retrieval</id><content type="html" xml:base="https://zzong2006.github.io/blog/2025/use-llm-for-dense-retrieval/"><![CDATA[<p>paper</p> <ul> <li>Making Large Language Models A Better Foundation For Dense Retrieval</li> </ul> <p>Model</p> <ul> <li><a href="https://huggingface.co/BAAI/bge-reranker-v2-gemma">BAAI/bge-reranker-v2-gemma</a></li> </ul>]]></content><author><name></name></author><category term="survey"/><category term="LLM"/><category term="dense_retrieval"/><summary type="html"><![CDATA[paper Making Large Language Models A Better Foundation For Dense Retrieval]]></summary></entry><entry><title type="html">FC 보다는 Code 실행이 더 좋은 Agent 를 만든다</title><link href="https://zzong2006.github.io/blog/2025/code-act/" rel="alternate" type="text/html" title="FC 보다는 Code 실행이 더 좋은 Agent 를 만든다"/><published>2025-01-07T17:00:00+00:00</published><updated>2025-01-07T17:00:00+00:00</updated><id>https://zzong2006.github.io/blog/2025/code-act</id><content type="html" xml:base="https://zzong2006.github.io/blog/2025/code-act/"><![CDATA[<h2 id="references">References</h2> <ul> <li><a href="https://machinelearning.apple.com/research/codeact">CodeAct: Your LLM Agent Acts Better when Generating Code</a></li> <li><a href="https://github.com/xingyaoww/code-act">Executable Code Actions Elicit Better LLM Agents (github)</a></li> </ul>]]></content><author><name></name></author><category term="paper-review"/><category term="LLM"/><category term="function_calling"/><category term="agent"/><summary type="html"><![CDATA[References]]></summary></entry><entry><title type="html">Multi-Agent 관련 리소스 모음</title><link href="https://zzong2006.github.io/blog/2025/multi-agents-resources/" rel="alternate" type="text/html" title="Multi-Agent 관련 리소스 모음"/><published>2025-01-07T16:00:00+00:00</published><updated>2025-01-07T16:00:00+00:00</updated><id>https://zzong2006.github.io/blog/2025/multi-agents-resources</id><content type="html" xml:base="https://zzong2006.github.io/blog/2025/multi-agents-resources/"><![CDATA[<h2 id="some-comments">Some comments</h2> <p><strong>from reddit</strong></p> <blockquote> <p>Multi-agent is not better than just single agent with tools. It’s much worse usually, I don’t know why people are so excited about multi-agent. I think the tools paradigm is much better, where the tool might happen to be really an agent. But nominally better to build a tool that does more to offload what agent has to think about. Dynamic creation of tools (program synthesis) is future.</p> </blockquote> <blockquote> <p>It’s better to allow the LLM freedom to code but give access to reliable tools. It’s ok if one uses function calling to access a finite set of tools (say ~30 or so, depending upon the model) as long as it has access to code and can call those same functions via code. But a pure function calling is very limiting to a general agent.</p> </blockquote> <h2 id="references">References</h2> <ul> <li><a href="https://github.com/huggingface/smolagents">huggingface/smolagents</a>: huggingface 에서 제공하는 agent 라이브러리</li> <li><a href="https://github.com/aymeric-roucher/GAIA">GAIA (github)</a>: Multi-Agent 벤치마크 (2023, Meta)</li> <li><a href="https://cookbook.openai.com/examples/orchestrating_agents">Orchestrating Agents</a>: OpenAI 에서 제공하는 agent 예제</li> <li><a href="https://arxiv.org/abs/2402.01030">Executable Code Actions Elicit Better LLM Agents (arxiv, 2024)</a></li> <li><a href="https://github.com/microsoft/autogen">AutoGen (github)</a>: Agent library from Microsoft</li> <li><a href="https://www.anthropic.com/research/building-effective-agents">Building Effective Agents (anthropic blog)</a></li> </ul>]]></content><author><name></name></author><category term="survey"/><category term="LLM"/><category term="agent"/><summary type="html"><![CDATA[Some comments]]></summary></entry><entry><title type="html">LLM 이 json 응답을 잘 하도록 하는법</title><link href="https://zzong2006.github.io/blog/2025/constrained-decoding/" rel="alternate" type="text/html" title="LLM 이 json 응답을 잘 하도록 하는법"/><published>2025-01-07T10:00:00+00:00</published><updated>2025-01-07T10:00:00+00:00</updated><id>https://zzong2006.github.io/blog/2025/constrained-decoding</id><content type="html" xml:base="https://zzong2006.github.io/blog/2025/constrained-decoding/"><![CDATA[<h2 id="constrained-decoding">Constrained decoding</h2> <p><img src="https://blog.mlc.ai/img/xgrammar/constrained-decoding.png" alt="constrained decoding" width="80%"/></p> <p>Constrained decoding is a common technique to enforce the output format of an LLM. As shown in the figure above, an LLM engine maintains an internal state of the desired structure and the history of generated tokens. When generating a new token, the engine identifies tokens that may violate the required structure and masks them off in the logits. The masking causes the sampling process to avoid invalid tokens and only generate valid ones. In this example, only tokens <code class="language-plaintext highlighter-rouge">true</code> and <code class="language-plaintext highlighter-rouge">false</code> are allowed in the first decoding step, and only <code class="language-plaintext highlighter-rouge">,</code> and <code class="language-plaintext highlighter-rouge">,\n</code> are allowed in the second decoding step.</p> <h2 id="context-free-grammars-cfgs">Context-free grammars (CFGs)</h2> <p>Although JSON schema is a popular method for structure specification, it cannot define code syntax or recursive structures (such as nested brackets of any depth). Context-free grammars (CFGs) provide a more powerful and general representation that can describe many complex structures.</p> <h2 id="references">References</h2> <ul> <li><a href="https://blog.mlc.ai/2024/11/22/achieving-efficient-flexible-portable-structured-generation-with-xgrammar">Achieving Efficient, Flexible, and Portable Structured Generation with XGrammar</a></li> </ul>]]></content><author><name></name></author><category term="inference"/><category term="LLM"/><summary type="html"><![CDATA[Constrained decoding]]></summary></entry><entry><title type="html">Algorithm lesson learned - array</title><link href="https://zzong2006.github.io/blog/2025/algorithm-lesson-learned-array/" rel="alternate" type="text/html" title="Algorithm lesson learned - array"/><published>2025-01-06T10:00:00+00:00</published><updated>2025-01-06T10:00:00+00:00</updated><id>https://zzong2006.github.io/blog/2025/algorithm-lesson-learned-array</id><content type="html" xml:base="https://zzong2006.github.io/blog/2025/algorithm-lesson-learned-array/"><![CDATA[<p>알고리즘 문제를 풀면서 인사이트를 얻은 내용들을 정리합니다.</p> <h2 id="구간-처리">구간 처리</h2> <p>어떤 구간을 처리하는 문제는 해당 구간을 모두 처리할려 하지말고, 구간의 앞과 끝 부분만 다룰 수 있는지 생각해보자.</p> <p>auxiliary array (difference array) 을 사용하여 범위 업데이트 작업을 효율적으로 적용할 수 있다. 범위 내의 모든 요소를 직접 업데이트하는 대신, 범위의 시작점과 끝점을 표시하고 나중에 prefix sum을 사용하여 업데이트를 적용한다.</p> <p>예를 들어, 주어진 배열에 대해 [0, 4] 구간에 +1을 적용하고, [2, 5] 구간에 -1을 적용한다고 가정해보자.</p> <ul> <li>auxiliary 배열의 [0] 인덱스에 +1을, [5] 인덱스에 -1을 적용하고, [2] 인덱스에 +1을, [6] 인덱스에 -1을 적용</li> <li>각 요소가 원래 배열에서 얼마나 증가하거나 감소했는지를 결정하기 위해 prefix sum을 사용하여 누적 합을 계산</li> </ul> <h3 id="관련-문제">관련 문제</h3> <ul> <li><a href="https://leetcode.com/problems/shifting-letters-ii/description/">leetcode: shifting-letters-ii</a></li> </ul>]]></content><author><name></name></author><category term="algorithm"/><category term="competitive-programming"/><category term="array"/><category term="string"/><category term="lesson-learned"/><summary type="html"><![CDATA[알고리즘 문제를 풀면서 인사이트를 얻은 내용들을 정리합니다.]]></summary></entry><entry><title type="html">llama 에 대해서 알아보자</title><link href="https://zzong2006.github.io/blog/2025/llama/" rel="alternate" type="text/html" title="llama 에 대해서 알아보자"/><published>2025-01-06T10:00:00+00:00</published><updated>2025-01-06T10:00:00+00:00</updated><id>https://zzong2006.github.io/blog/2025/llama</id><content type="html" xml:base="https://zzong2006.github.io/blog/2025/llama/"><![CDATA[<p>LLaMA 1, 2 모델을 뜯어보면서 알게된 내용들을 정리합니다.</p> <blockquote> <p>We attribute their success, as all else, to divine benevolence.</p> </blockquote> <h2 id="rmsnorm-root-mean-square-layer-normalization">RMSNorm (Root Mean Square Layer Normalization)</h2> <p>Why need a layer normalization? Internal covariate shift</p> <ul> <li>각 레이어의 출력을 평균 0 (re-centering), 분산 1 (re-scaling)로 맞춘다.</li> <li>Layer Normalization은 행(row) 단위로 적용된다.</li> </ul> <p>RMS 는 LayerNorm 의 효과가 mean 보다는 variance 쪽에 기여치가 더 높을 것이라 가정한다. 그래서 RMSNorm 은 평균 계산을 포기하고 variance 만 계산하여 정규화해서 computation-efficiency 에 이득을 취한다.</p> <h2 id="rotary-positional-embedding">Rotary positional embedding</h2> <p>Rotary positional embedding 은 relative positional embedding 과 비슷하지만, distance 정보를 상수값으로 치환하여 embedding vector 에 적용하면서 계산 효율을 높인다.</p> <p>그 상수는 complex number 로, Euler’s formula 를 이용해서 attention 값을 계산한다.</p> <p>Other positional embedding methods</p> <ul> <li>Absolute: Vanilla transformers 에서 적용된 방법으로, Attention 계산 시 이미 고정된 constant position 정보가 적용되어 있는 각 embedding vector 를 계산에 활용한다.</li> <li>Relative: Attention 계산 시, 각 embedding vector pair 마다 상대적인 distance 정보를 변수로 활용하여 계산한다.</li> </ul> <p>Absolute, relative 와 다르게 rotary positional embedding 은 <strong>q, k weight 가 먼저 적용된 이후</strong> 에 적용된다는 점이다.</p> <h2 id="grouped-multi-query-attention">Grouped Multi-Query Attention</h2> <p><strong>Multi-Query Attention</strong></p> <p>일반적인 multi-head attention 은 각 head 마다 서로 다른 key, value 를 사용하는데, 이를 하나로 통일하여 모든 query 에 동일한 key, value 를 사용한다.</p> <p>Why?</p> <ul> <li>Problem: GPU 의 memory bandwidth 는 GPU 의 계산 속도 (FLOPS) 보다 훨씬 느리다.</li> <li>KV cache 를 사용하면서, 하나의 토큰 query 에 대해서만 계산하므로, i/o bottleneck 이 발생한다.</li> </ul> <p><strong>Grouped Multi-Query Attention</strong></p> <p>Grouped Multi-Query 는 일정 개수의 그룹마다 동일한 key, value 를 사용하는 방법이다. 즉, group 사이즈가 1 일 때는 일반적인 multi-head attention 과 동일하다.</p> <h2 id="swiglu-activation-function">SwiGLU activation function</h2> <p>SwiGLU는 Swish + GLU, 두개의 Activation Functions를 섞어 만든 함수</p> <p><strong>Swish Function</strong></p> <ul> <li>$\sigma(x) = x \cdot \sigma(x)$ 로 표현된다.</li> <li>Original Transformer 에서의 ReLU 와 비슷하지만, 음수쪽에서 0 에 가까워질때 기울기가 0 이 되는 문제(Dying ReLU)를 해결한다.</li> </ul> <p><strong>GLU (Gated Linear Unit)</strong></p> \[GLU(a, b) = a \otimes \sigma(b)\] <p>The GLU also has non-linear capabilities, but has a linear path for the gradient so diminishes the vanishing gradient problem.</p> <p><strong>SwiGLU</strong></p> <p>GLU 에서 sigmoid 대신 Swish Function 을 사용한다.</p> \[SwiGLU(a, b) = a \otimes \text{Swish}_\beta(b)\] <p>구체적으로는 총 3개의 weight matrix 를 사용하여 LLaMA 의 FFN 을 구성한다.</p> \[\text{FFN}_\text{SwiGLU}(x, W, V, W_2) = (\text{Swish}_1(xW) \otimes xV)W_2\] <p><strong>vs. ReLU</strong></p> <p>ReLU 보다는 SwiGLU 가 안정적으로 학습되는 느낌이지만, 그렇다고 엄청 좋은 성능을 보이는 것은 아니다. 실험 결과에서는 ReLU 는 83.80 점이고, SwiGLU 는 84.36 점 정도로, 거의 차이가 없는 느낌.</p> <p>하지만 전반적인 벤치마크 성능에서 SwiGLU 쪽이 우위인 상황.</p> <h2 id="references">References</h2> <ul> <li><a href="https://www.youtube.com/watch?v=Mn_9W1nCFLo&amp;ab_channel=UmarJamil">LLaMA explained: KV-Cache, Rotary Positional Embedding, RMS Norm, Grouped Query Attention, SwiGLU</a></li> <li><a href="https://jihan819.tistory.com/entry/AI-SwiGLU%EB%8A%94-%EC%96%B4%EB%96%A4-%ED%95%A8%EC%88%98%EC%9D%BC%EA%B9%8C">SwiGLU는 어떤 함수일까?</a></li> </ul>]]></content><author><name></name></author><category term="algorithm"/><category term="LLaMA"/><category term="Meta"/><summary type="html"><![CDATA[LLaMA 1, 2 모델을 뜯어보면서 알게된 내용들을 정리합니다.]]></summary></entry><entry><title type="html">Semantic Retrieval at Walmart</title><link href="https://zzong2006.github.io/blog/2025/semantic-retrieval-at-walmart/" rel="alternate" type="text/html" title="Semantic Retrieval at Walmart"/><published>2025-01-05T17:00:00+00:00</published><updated>2025-01-05T17:00:00+00:00</updated><id>https://zzong2006.github.io/blog/2025/semantic-retrieval-at-walmart</id><content type="html" xml:base="https://zzong2006.github.io/blog/2025/semantic-retrieval-at-walmart/"><![CDATA[<p>Walmart 에서 적용한 Embedding-based neural retrieval (EBR) 에 대한 논문 리뷰.</p> <p>2022년, 2024년에 각각 하나씩 시리즈물 느낌으로 발표되었다.</p> <h2 id="1-summary-of-the-proposed-method">(1) Summary of the proposed method</h2> <ol> <li>A hybrid system for e-commerce search deployed at Walmart that combines traditional inverted index and embedding-based neural retrieval to better answer user tail queries.</li> <li>A novel method of selecting negative examples for training a large neural retrieval model and an approximate metric to evaluate the performance</li> </ol> <h2 id="2-related-works">(2) Related Works</h2> <p><strong>Production search vs. Web search</strong></p> <p>Production search is way more challenging than web search.</p> <ul> <li>Product titles (the main search-able text) are generally much shorter than web documents.</li> <li>While many web documents may contain the same information, a specific product from a seller rarely has a duplicate.</li> </ul> <p><strong>Traditional Solutions</strong></p> <ul> <li>knowledge graph: need a huge amount of domain expertise, and the cost of maintaining these components is high, since the catalog and product vocabulary frequently change in e-commerce</li> <li>BM25, an inverted index: suffers from vocabulary mismatch between the query and the product title</li> <li>neural systems: limited by the fact that the embedding size cannot be too large due to latency concerns</li> </ul> <h2 id="3-proposed-methods">(3) Proposed Methods</h2> <p><strong>Reducing the size of embedding</strong></p> <p>Reducing the size of embedding is beneficial as it allows the item embedding and the ANN index to be refreshed more frequently.</p> <p>Tried 2 approaches:</p> <ol> <li>Add a linear projection layer to reduce the embedding size to 368, 256, 128, and 64</li> <li>Use a transformer architecture that has a smaller embedding size: MiniLM (12 layers and an embedding size of 368), XtremeDistil (6 layers and an embedding size of 368)</li> </ol> <p>The <strong>linear projection</strong> is very effective in reducing the size of the embedding with very little performance cost.</p> <p><strong>A hybrid architecture</strong></p> <p>…</p> <p><strong>ANN</strong></p> <ul> <li>Normalized vectors of dimension 256, the ANN services can yield 99% for recall@20 evaluated against the full nearest neighborhood search, with an average latency around 13 ms;</li> <li>For normalized vectors of dimension 768, the services can achieve a similar recall@20 but with three times the storage space;</li> </ul> <h2 id="6-lesson-learned">(6) Lesson Learned</h2> <p><strong>Cosine similarity vs. Inner product</strong></p> <ul> <li>The inner product is more stable during training and does not require the temperature factor 𝜎.</li> <li>But, <strong>inner product was much harder to optimize</strong> when creating the ANN index, compared to cosine similarity.</li> </ul> <p><strong>Text fields</strong></p> <p>Many text fields are generally available for each product, and the quality of the text fields varies. But, we could not extract any boost in performance by using these text fields. This is probably because descriptions can contain a lot of irrelevant text that simply adds noise.</p> <p><strong>Model Complexity</strong></p> <p>A very deep model or very large embedding size is not necessary to achieve top performance. This is probably because queries and product titles are not very complex from a semantic perspective.</p> <h2 id="references">References</h2> <p>Papers</p> <ul> <li>[1] <a href="https://arxiv.org/pdf/2412.04637">Semantic Retrieval at Walmart</a></li> <li>[2] <a href="https://arxiv.org/abs/2408.04884">Enhancing Relevance of Embedding-based Retrieval at Walmart</a></li> </ul>]]></content><author><name></name></author><category term="paper-review"/><category term="Walmart"/><category term="ANN"/><category term="RAG"/><category term="WIP"/><summary type="html"><![CDATA[Walmart 에서 적용한 Embedding-based neural retrieval (EBR) 에 대한 논문 리뷰.]]></summary></entry><entry><title type="html">KV-Cache 에 대해 알아보자</title><link href="https://zzong2006.github.io/blog/2025/kv-cache/" rel="alternate" type="text/html" title="KV-Cache 에 대해 알아보자"/><published>2025-01-05T10:00:00+00:00</published><updated>2025-01-05T10:00:00+00:00</updated><id>https://zzong2006.github.io/blog/2025/kv-cache</id><content type="html" xml:base="https://zzong2006.github.io/blog/2025/kv-cache/"><![CDATA[<p>The Attention module concatenates the current key-values with the past key-values stored in the cache. This results in attention weights of shape (new_tokens_length, past_kv_length + new_tokens_length). Essentially, the past and current key-values are combined to compute attention scores, ensuring that the model considers both previous context and new input. The concatenated key-values are used to compute the attention scores resulting in attention weights of shape (new_tokens_length, past_kv_length + new_tokens_length).</p> <p>Therefore, when iteratively calling forward() instead of the generate() method, it’s crucial to ensure that the attention mask shape matches the combined length of past and current key-values. The attention mask should have the shape (batch_size, past_kv_length + new_tokens_length). This is usually handled internally when you call generate() method. If you want to implement your own generation loop with Cache classes, take this into consideration and prepare the attention mask to hold values to current and past tokens.</p> <h2 id="references">References</h2> <ul> <li><a href="https://huggingface.co/docs/transformers/kv_cache">huggingface transformers - kv_cache</a></li> </ul>]]></content><author><name></name></author><category term="paper-review"/><category term="Transformers"/><category term="LLM"/><category term="WIP"/><summary type="html"><![CDATA[The Attention module concatenates the current key-values with the past key-values stored in the cache. This results in attention weights of shape (new_tokens_length, past_kv_length + new_tokens_length). Essentially, the past and current key-values are combined to compute attention scores, ensuring that the model considers both previous context and new input. The concatenated key-values are used to compute the attention scores resulting in attention weights of shape (new_tokens_length, past_kv_length + new_tokens_length).]]></summary></entry><entry><title type="html">차원 축소 전략 중 하나인 Linear Discriminant Analysis</title><link href="https://zzong2006.github.io/blog/2025/lda/" rel="alternate" type="text/html" title="차원 축소 전략 중 하나인 Linear Discriminant Analysis"/><published>2025-01-05T10:00:00+00:00</published><updated>2025-01-05T10:00:00+00:00</updated><id>https://zzong2006.github.io/blog/2025/lda</id><content type="html" xml:base="https://zzong2006.github.io/blog/2025/lda/"><![CDATA[<p>LDA (Linear Discriminant Analysis) and PCA (Principal Component Analysis) are both dimensionality reduction techniques, but they serve different purposes.</p> <h2 id="lda-vs-pca">LDA vs PCA</h2> <h3 id="1-pca">(1) PCA</h3> <p><img src="https://i.imgur.com/PJgQ6w1.png" alt="PCA" style="width: 50%;"/></p> <ul> <li>PCA 는 데이터의 분산을 최대화하는 방향 (principal components) 을 찾는다. <ul> <li>쉽게 생각하면, 데이터들을 특정 축(axis, principal component)에 사영(projection)했을때, 가장 높은 분산을 가지는 축을 찾아 그곳으로 차원을 축소한다.</li> </ul> </li> <li>간단한 방식이지만, 데이터의 클래스 정보를 고려하지 않는다는 문제가 있다.</li> <li>주로 데이터 분석 및 노이즈 제거를 위해 사용된다.</li> <li>단점: 종종 feature 의 variance 가 낮으면서 중요한 경우가 있는데, PCA 는 이를 고려하는데 어려움을 겪는다.</li> </ul> <h3 id="2-lda">(2) LDA</h3> <ul> <li>LDA 는 데이터의 class label 을 고려하는 supervised 방식이다.</li> <li>데이터의 여러 클래스 간 분리 정도(separation)를 최대화하는 방향을 찾는다.</li> <li>LDA 는 주로 클래스 정보를 보존하기 위해서 분류 task 를 해결할 때 사용된다.</li> <li>단점: 클래스 분포가 불균형적인 경우, 특정 클래스에 편향(bias)된 결과를 내기 쉽다.</li> </ul> <h2 id="implementation">Implementation</h2> <p><code class="language-plaintext highlighter-rouge">sklearn</code> 에 이미 구현된 함수가 있다.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">sklearn.discriminant_analysis</span> <span class="kn">import</span> <span class="n">LinearDiscriminantAnalysis</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">]])</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>

<span class="n">clf</span> <span class="o">=</span> <span class="nc">LinearDiscriminantAnalysis</span><span class="p">()</span>
<span class="n">clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">clf</span><span class="p">.</span><span class="nf">predict</span><span class="p">([[</span><span class="o">-</span><span class="mf">0.8</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]]))</span> <span class="c1"># 1
</span></code></pre></div></div> <h2 id="references">References</h2> <ul> <li><a href="https://www.linkedin.com/advice/0/what-key-differences-between-pca-lda-dimensionality-7memc">LinkedIn - What are the key differences between PCA and LDA?</a></li> <li><a href="https://velog.io/@chiroya/23-PCA-LDA">velog - PCA vs LDA</a></li> </ul>]]></content><author><name></name></author><category term="dimension-reduction"/><category term="encoder"/><category term="WIP"/><category term="PCA"/><category term="LDA"/><category term="Preprocessing"/><summary type="html"><![CDATA[LDA (Linear Discriminant Analysis) and PCA (Principal Component Analysis) are both dimensionality reduction techniques, but they serve different purposes.]]></summary></entry></feed>